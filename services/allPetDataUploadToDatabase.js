const fs = require("fs");const path = require("path");const readline = require("readline");const dataLocation = "../public/PetsData";const setting = require("../config/appSetting");const keys = require("../config/credential");const allPetDataUploadToDatabase = db => {  let fileIndex = 1;  const rescueGroupAPIKey = keys.devKeys.RescueGroups_ApiKey;  while (fileIndex > 0) {    let fileName = "test_" + fileIndex + ".json";      //rescueGroupAPIKey + "_pets_" + fileIndex + ".json";    let filePath = path.join(__dirname, dataLocation, fileName);    if (validateFileExist(filePath)) {      dataParse(filePath, fileIndex, db);      fileIndex++;    } else {      fileIndex = -1;    }  }};//tryconst dataParse = (filePath, fileIndex, db) => {  let petsArray = []  // firestore write limit for single batch => size:10MB, doc amount: 500, rate: 1/s  const docAmountPerBatch = setting.firestore.docAmountPerBatch;  const docRef = db.collection(setting.firestore.petsCollectionName);  const rl = readline.createInterface({    input: fs.createReadStream(filePath),    terminal: false  });  rl.on("line", line => {    let petObj = JSON.parse(line);    petsArray.push(petObj);  });  rl.on("close", () => {    console.log("========================================");    console.log("doc amount for each batch: ", docAmountPerBatch);    console.log("========================================");    console.log("petsArray length: ", petsArray.length);    let lowerLimit = 0;    let upperLimit = docAmountPerBatch;    while (lowerLimit < upperLimit && lowerLimit < petsArray.length) {      // create one batch each cycle and then save data into it      let batch = db.batch();      let temp = petsArray.slice(lowerLimit, upperLimit);      temp.map(pet => {        let ref = docRef.doc(pet.animalID);        batch.set(ref, pet);      });      //after saving, commit this batch. One batch can only be committed once      batch        .commit()        .then(result => {          console.log("result: committed doc amount --", result.length);        })        .catch(err => {          console.log("err", err);        });      console.log("commit: file number ", fileIndex);      console.log(" -- from ", lowerLimit, " -- to ", upperLimit);      // increase the boundary to start a new batch      lowerLimit = upperLimit;      upperLimit += docAmountPerBatch;    }  });};const validateFileExist = path => {  try {    return fs.statSync(path).isFile();  } catch (e) {    return false;  }};module.exports = allPetDataUploadToDatabase;