const fs = require("fs");const path = require("path");const readline = require("readline");const dataLocation = "../public/PetsData";const setting = require("../config/appSetting");const keys = require("../config/credential");const firebase = require('firebase-admin');const GeoFire = require("geofire");const googleMapsClient = require("@google/maps").createClient({  key: keys.devKeys.googleMapApi,  Promise: Promise});const firedb = require('../modules/firebase').firedbconst dbRef = firedb.ref('orgTest')const geoFire = new GeoFire(dbRef);//handlerconst orgsGeoPointsUploadToDatabase = async () => {  let fileIndex = 1;  const rescueGroupAPIKey = keys.devKeys.RescueGroups_ApiKey;  while (fileIndex > 0) {    let fileName = "test_" + fileIndex + ".json";      //rescueGroupAPIKey + "_orgs_" + fileIndex + ".json";    let filePath = path.join(__dirname, dataLocation, fileName);    if (validateFileExist(filePath)) {      dataParse(filePath, fileIndex);      fileIndex++;    } else {      fileIndex = -1;    }  }};//const dataParse = async filePath =>{  let total = 0;  const rl = readline.createInterface({    input: fs.createReadStream(filePath),    terminal: false  });  rl.on("line", async line => {    let dataObj = JSON.parse(line);    let latlong = await addressToGeo(dataObj);    let arr = [latlong.lat,latlong.lng]    // call geofire.set to create its special geo object, and save into dbRef automatically    geoFire.set(dataObj.orgID, arr).then(function() {      console.log(`org ${dataObj.orgID} added to GeoFire`);      total += 1;    }, function(error) {      console.log(`err: org ${dataObj.orgID} ${error}`);    });  });  rl.on('close',()=>{    console.log('closed, total added: ', total)  })}//call google api to convert a string into geo objectconst addressToGeo = async dataObj => {  let {name,address,city,zip} = dataObj  let addressStr = `${name} ${address} ${city} ${zip}`;  let result = await googleMapsClient    .geocode({ address: addressStr })    .asPromise()    .then(response => {      return response.json.results[0].geometry.location;    })    .catch(err => {      console.log('addrToGeo err-- orgID: ',dataObj.orgID, err);      return null;    });  return result;};const validateFileExist = path => {  try {    return fs.statSync(path).isFile();  } catch (e) {    return false;  }};module.exports = orgsGeoPointsUploadToDatabase;